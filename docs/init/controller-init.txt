# Copilot에게 보내는 요청

아래 두 개의 REST API 명세 Markdown 파일을 순서대로 읽고, 우선적으로 Spring Boot Controller 클래스만 생성해줘.

1. /docs/rest-api/main-rest-api.md  
2. /docs/rest-api/result-rest-api.md  
3. /docs/code-convention.md

요구사항:
- 각 파일에 정의된 모든 엔드포인트마다 @RestController 클래스와 메서드 시그니처를 만든다.
- 클래스명과 메서드명은 파일 내 명세의 리소스 이름과 HTTP 메서드에 맞춰 직관적으로 짓는다.
- @RequestMapping, @GetMapping, @PostMapping, @PutMapping, @DeleteMapping 등을 정확히 사용한다.
- 경로 변수(@PathVariable)와 쿼리 파라미터(@RequestParam)를 메서드 인자로 선언한다.
- 요청 바디가 필요하면 @RequestBody DTO 타입을 선언하되, DTO 클래스 구현은 나중에 추가할 예정이니 현재는 가상의 클래스명(requestDto)만 사용한다.
- 응답 타입은 ResponseEntity<…> 형태로 선언하되, 실제 DTO는 MyResponseDto 같은 이름을 사용하고 추후 정의할 수 있도록 한다.
- 각 메서드 내부에서는 아직 서비스 호출 코드를 작성하지 말고 `// TODO: service 호출` 주석만 남긴다.
- 패키지 구조는 `com.myapp.api.controller` 로 가정한다.

예시 출력 (main-rest-api.md 의 /users GET 엔드포인트 가정):

```java
package com.myapp.api.controller;

import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

@RestController
@RequestMapping("/users")
public class UserController {

    @GetMapping
    public ResponseEntity<List<UserResponseDto>> getAllUsers() {
        // TODO: service 호출
        return ResponseEntity.ok(/* placeholder */);
    }

    // ... 나머지 엔드포인트
}
